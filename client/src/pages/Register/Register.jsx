
import { useState } from 'react';
import './Register.css';
import Stepprogress from '../../component/StepProgress/Stepprogress';
import { useNavigate } from 'react-router-dom';
import { createSinhVien, getByCCCDSinhVien,editSinhVien } from '../../routes/sinhvien';
import { createHopDong, getByMaSVHopDong} from '../../routes/hopdong';
import { createHoSo } from '../../routes/hoso';
import { toast } from 'react-toastify';
import {createDangKy} from '../../routes/dangky';
const Register = () => {
  const [step, setStep] = useState(0);
  const navigate = useNavigate();
  const [isRegistered, setIsRegistered] = useState(false);

  // const [taiKhoan, setTaiKhoan] = useState({
  //   Username: '',
  //   Email: '',
  //   Password: '',
  //   anh: '',
  //   MaPQ: 5,
  //   MaSV:''
  // });
  const [sinhVien, setSinhVien] = useState({
    MaSV: '',
    HoTen: '',
    NgaySinh: '',
    QueQuan: '',
    GioiTinh: '',
    Email: '',
    CCCD: '',
    SDT: '',
    Truong: '',
    Lop: '',
    NienKhoa: '',
    GhiChu: ' ',
    anh: '',
    TrangThai: 'Ch·ªù duy·ªát',
  });
  const [hoSo, setHoSo] = useState({
    MaHD: '',
    DonXin: '',
    GiayXacNhanSinhVien: '',
    CCCDPhoTo: '',
  });
  const [hopDong, setHopDong] = useState({
    MaSV: '',
    MaPhong: '',
    NgayBatDau: '',
    NgayKetThuc: '',
    ThoiHan: '6 th√°ng',
    TrangThai: 'Ch·ªù duy·ªát',
    GhiChu: ' ',
  });
  
  // const [dangky, setDangKy] = useState({
  //   Email: '',
  //   anh: '',
  //   MaSV: '',
  //   HoTen: '',
  //   NgaySinh: '',
  //   QueQuan: '',
  //   GioiTinh: '',
  //   CCCD: '',
  //   SDT: '',
  //   Truong: '',
  //   Lop: '',
  //   NienKhoa: '',
  //   MaPhong: '',
  //   NgayBatDau: '',
  //   TrangThai: 'Ch·ªù duy·ªát',
  //   DonXin: '',
  //   GiayXacNhanSinhVien: '',
  //   CCCDPhoTo: '',
    
  // });

  const handleChange = (setter, field) => (e) => {
    const value = e.target.type === 'file' ? e.target.files[0] : e.target.value;
    if (setter === setHopDong && field === 'NgayBatDau') {
      setter((prev) => ({
        ...prev,
        NgayBatDau: value,
      }));
    } else {
      setter((prev) => ({ ...prev, [field]: value }));
    }
  };
  const isStepValid = () => {
    switch (step) {
      case 0:
        return sinhVien.MaSV && sinhVien.HoTen && sinhVien.NgaySinh && sinhVien.QueQuan && sinhVien.GioiTinh && sinhVien.Email && sinhVien.CCCD && sinhVien.SDT && sinhVien.Truong && sinhVien.Lop && sinhVien.NienKhoa && sinhVien.Email && sinhVien.anh;
      case 2:
        return hopDong.MaPhong && hopDong.NgayBatDau;
      case 1:
        return hoSo.DonXin && hoSo.GiayXacNhanSinhVien && hoSo.CCCDPhoTo;
      default:
        return true;
    }
  };
  // const handleNext = async () => {
  //   if (step === 3) {
  //     try {
  //       const sinhVienData = {
  //         ...sinhVien,
  //         Email: sinhVien.Email,
  //         anh: sinhVien.anh,
  //       };
  //       const resSinhVien = await createSinhVien(sinhVienData);
  //       const MaSV = resSinhVien.id;
  //     //   const taiKhoanWithMaSV = {
  //     //   ...taiKhoan,
  //     //   MaSV: MaSV,
  //     // };

  //     // await register(taiKhoanWithMaSV);
  //       const hopDongData = {
  //         ...hopDong,
  //         MaSV: MaSV,
  //         ThoiHan: '6 th√°ng',
  //       };

  //       const resHopDong = await createHopDong(hopDongData);
  //       const MaHD = resHopDong.id;

  //       const hosoData = {
  //         ...hoSo,
  //         MaHD: MaHD,
  //       };
  //       await createHoSo(hosoData);
  //       // await createDangKy(dangky);

  //       setIsRegistered(true);
  //       toast.success('ƒêƒÉng k√Ω Th√†nh c√¥ng');
  //     } catch (err) {
  //       toast.error(err|| 'C√≥ l·ªói x·∫£y ra!');
  //     }
  //   } else {
  //     setStep((s) => Math.min(4, s + 1));
  //   }
  // };
  const handleNext = async () => {
  if (step === 3) {
    try {
      let MaSV = '';
      let isNewSV = false;

      // Ki·ªÉm tra sinh vi√™n t·ªìn t·∫°i theo CCCD
      const existingSV = await getByCCCDSinhVien(sinhVien.CCCD);

      if (existingSV) {
        MaSV = existingSV.MaSV;

        // Ki·ªÉm tra h·ª£p ƒë·ªìng c·ªßa sinh vi√™n ƒë√≥
        const existingHD = await getByMaSVHopDong(MaSV);

        if (existingHD && ['Ch·ªù duy·ªát', 'ƒêang ·ªü'].includes(existingHD.TrangThai)) {
          toast.error('Sinh vi√™n ƒë√£ c√≥ h·ª£p ƒë·ªìng ƒëang ho·∫°t ƒë·ªông ho·∫∑c ch·ªù duy·ªát.');
          return;
        }
await editSinhVien({
          ...existingSV,
          TrangThai: 'Ch·ªù duy·ªát'
        });
        // N·∫øu l√† "ƒê√£ h·ªßy" ho·∫∑c "ƒê√£ k·∫øt th√∫c" th√¨ cho ph√©p ti·∫øp t·ª•c, KH√îNG t·∫°o l·∫°i sinh vi√™n
      } else {
        // T·∫°o m·ªõi sinh vi√™n
        const sinhVienData = {
          ...sinhVien,
          Email: sinhVien.Email,
          anh: sinhVien.anh,
        };
        const resSinhVien = await createSinhVien(sinhVienData);
        MaSV = resSinhVien.id;
        isNewSV = true;
      }

      // T·∫°o h·ª£p ƒë·ªìng m·ªõi
      const hopDongData = {
        ...hopDong,
        MaSV: MaSV,
        ThoiHan: '6 th√°ng',
        TrangThai: 'Ch·ªù duy·ªát',
      };
      const resHopDong = await createHopDong(hopDongData);
      const MaHD = resHopDong.id;

      // T·∫°o h·ªì s∆° m·ªõi
      const hosoData = {
        ...hoSo,
        MaHD: MaHD,
      };
      await createHoSo(hosoData);

      setIsRegistered(true);
      toast.success(isNewSV ? 'ƒêƒÉng k√Ω th√†nh c√¥ng!' : 'ƒêƒÉng k√Ω l·∫°i th√†nh c√¥ng!');
    } catch (err) {
      toast.error(err?.message || 'C√≥ l·ªói x·∫£y ra!');
    }
  } else {
    setStep((s) => Math.min(4, s + 1));
  }
};


  return (
    <div>
      <div className="step-header">
        <Stepprogress currentStep={step} />
      </div>
      <div className="step-form">
        {step === 0 && (
          <div>
            <h3>Th√¥ng tin c√° nh√¢n</h3>
            <p>M√£ sinh vi√™n</p>
            <input type="text" value={sinhVien.MaSV} onChange={handleChange(setSinhVien, 'MaSV')} />
            <p>H·ªç T√™n Sinh Vi√™n</p>
            <input type="text" value={sinhVien.HoTen} onChange={handleChange(setSinhVien, 'HoTen')} />
            <p>Ng√†y Sinh</p>
            <input type="date" value={sinhVien.NgaySinh} onChange={handleChange(setSinhVien, 'NgaySinh')} />
            <p>Qu√™ Qu√°n</p>
            <input type="text" value={sinhVien.QueQuan} onChange={handleChange(setSinhVien, 'QueQuan')} />
            <p>Gi·ªõi T√≠nh</p>
            <input type="text" value={sinhVien.GioiTinh} onChange={handleChange(setSinhVien, 'GioiTinh')} />
            <p>Email</p>
            <input type="email" value={sinhVien.Email} onChange={handleChange(setSinhVien, 'Email')} />
            <p>S·ªë CƒÉn c∆∞·ªõc c√¥ng d√¢n</p>
            <input type="text" value={sinhVien.CCCD} onChange={handleChange(setSinhVien, 'CCCD')} />
            <p>S·ªë ƒëi·ªán tho·∫°i</p>
            <input type="text" value={sinhVien.SDT} onChange={handleChange(setSinhVien, 'SDT')} />
            <p>Tr∆∞·ªùng</p>
            <input type="text" value={sinhVien.Truong} onChange={handleChange(setSinhVien, 'Truong')} />
            <p>L·ªõp</p>
            <input type="text" value={sinhVien.Lop} onChange={handleChange(setSinhVien, 'Lop')} />
            <p>Ni√™n Kh√≥a</p>
            <input type="text" value={sinhVien.NienKhoa} onChange={handleChange(setSinhVien, 'NienKhoa')} />
            <p>·∫¢nh ƒë·∫°i di·ªán</p>
            <input type="file" accept="image/*" onChange={handleChange(setSinhVien, 'anh')} />
          </div>
        )}
        {step === 2 && (
          <div>
            <h3>Ch·ªçn ph√≤ng</h3>
            <p>Ch·ªçn Ph√≤ng</p>
            <input type="text"  value={hopDong.MaPhong} onChange={handleChange(setHopDong, 'MaPhong')} />
            <p>Ng√†y b·∫Øt ƒë·∫ßu ·ªü</p>
            <input type="date"  value={hopDong.NgayBatDau} onChange={handleChange(setHopDong, 'NgayBatDau')} />
          </div>
        )}
        {step === 1 && (
          <div>
            <h3>Gi·∫•y t·ªù c·∫ßn thi·∫øt</h3>
            <p>ƒê∆°n xin</p>
            <input type="file" onChange={handleChange(setHoSo, 'DonXin')} />
            <p>Gi·∫•y x√°c nh·∫≠n sinh vi√™n</p>
            <input type="file" onChange={handleChange(setHoSo, 'GiayXacNhanSinhVien')} />
            <p>CƒÉn c∆∞·ªõc c√¥ng d√¢n photo</p>
            <input type="file" onChange={handleChange(setHoSo, 'CCCDPhoTo')} />
          </div>
        )}
        {step === 3 && (
  <div>
    <h3>X√°c nh·∫≠n th√¥ng tin</h3>
    <p>Vui l√≤ng ki·ªÉm tra l·∫°i to√†n b·ªô th√¥ng tin tr∆∞·ªõc khi nh·∫•n "Ho√†n t·∫•t".</p>
    <table className="confirmation-table">
      <tbody>
        <tr><td><strong>M√£ SV:</strong></td><td>{sinhVien.MaSV}</td></tr>
        <tr><td><strong>H·ªç t√™n:</strong></td><td>{sinhVien.HoTen}</td></tr>
        <tr><td><strong>Ng√†y sinh:</strong></td><td>{sinhVien.NgaySinh}</td></tr>
        <tr><td><strong>Qu√™ qu√°n:</strong></td><td>{sinhVien.QueQuan}</td></tr>
        <tr><td><strong>Gi·ªõi t√≠nh:</strong></td><td>{sinhVien.GioiTinh}</td></tr>
        <tr><td><strong>Email:</strong></td><td>{sinhVien.Email}</td></tr>
        <tr><td><strong>CCCD:</strong></td><td>{sinhVien.CCCD}</td></tr>
        <tr><td><strong>SƒêT:</strong></td><td>{sinhVien.SDT}</td></tr>
        <tr><td><strong>Tr∆∞·ªùng:</strong></td><td>{sinhVien.Truong}</td></tr>
        <tr><td><strong>L·ªõp:</strong></td><td>{sinhVien.Lop}</td></tr>
        <tr><td><strong>Ni√™n kh√≥a:</strong></td><td>{sinhVien.NienKhoa}</td></tr>
        <tr>
          <td><strong>·∫¢nh ƒë·∫°i di·ªán:</strong></td>
          <td>{sinhVien.anh && <img src={URL.createObjectURL(sinhVien.anh)} alt="·∫¢nh ƒë·∫°i di·ªán" width="80" />}</td>
        </tr>
        <tr><td colSpan={2}><strong>üìÅ Gi·∫•y t·ªù ƒë√≠nh k√®m</strong></td></tr>
        <tr><td>ƒê∆°n xin:</td><td>{hoSo.DonXin?.name}</td></tr>
        <tr><td>Gi·∫•y x√°c nh·∫≠n SV:</td><td>{hoSo.GiayXacNhanSinhVien?.name}</td></tr>
        <tr><td>CCCD photo:</td><td>{hoSo.CCCDPhoTo?.name}</td></tr>
        <tr><td colSpan={2}><strong>üè† Th√¥ng tin h·ª£p ƒë·ªìng</strong></td></tr>
        <tr><td>M√£ ph√≤ng:</td><td>{hopDong.MaPhong}</td></tr>
        <tr><td>Ng√†y b·∫Øt ƒë·∫ßu:</td><td>{hopDong.NgayBatDau}</td></tr>
        <tr><td>Th·ªùi h·∫°n:</td><td>{hopDong.ThoiHan}</td></tr>
      </tbody>
    </table>
  </div>
)}

      </div>
      <div className="step-buttons">
        <button onClick={() => setStep((s) => Math.max(0, s - 1))} disabled={step === 0}>
          ‚Üê Quay l·∫°i
        </button>
        <button onClick={handleNext} disabled={!isStepValid()}>
          {step === 3 ? 'Ho√†n t·∫•t' : 'Ti·∫øp ‚Üí'}
        </button>
      </div>
      {isRegistered && (
        <div className="modal">
          <div className="modal-content">
            <h2>üéâ ƒêƒÉng k√Ω th√†nh c√¥ng!</h2>
            <p>N·∫øu t√†i kho·∫£n c·ªßa b·∫°n ƒë∆∞·ª£c duy·ªát, h·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông x·ª≠ l√Ω h·ªì s∆° v√† h·ª£p ƒë·ªìng.</p>
            <button onClick={() => {  setIsRegistered(false);  navigate('/login', { state: { activePanel: 'info' } }); }} >ƒê√≥ng</button>
          </div>
        </div>
      )}
    </div>
  );
};

export default Register;
